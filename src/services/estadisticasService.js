import api from "./api"
import { API_ROUTES } from "../config"

// Servicio para manejar operaciones relacionadas con estad√≠sticas
const estadisticasService = {
  /**
   * Obtiene estad√≠sticas generales del sistema (versi√≥n r√°pida/cacheada con fallback)
   * @returns {Promise} Promesa con la respuesta
   */
  obtenerEstadisticasGeneralesRapido: async () => {
    try {
      console.log("Intentando obtener estad√≠sticas generales r√°pidas...")
      const response = await api.get(API_ROUTES.SHARED.ESTADISTICAS_GENERALES_RAPIDO)
      console.log("‚úÖ Estad√≠sticas generales r√°pidas obtenidas exitosamente")
      return response.data
    } catch (error) {
      console.warn("‚ö†Ô∏è Error al obtener estad√≠sticas generales r√°pidas:", error)

      // Si es un error 404, intentar con el endpoint normal como fallback
      if (error.response && error.response.status === 404) {
        console.log("üîÑ Datos cacheados no disponibles, usando endpoint normal como fallback...")
        try {
          const fallbackResponse = await api.get(API_ROUTES.SHARED.ESTADISTICAS_GENERALES)
          console.log("‚úÖ Estad√≠sticas generales obtenidas desde endpoint normal")
          return fallbackResponse.data
        } catch (fallbackError) {
          console.error("‚ùå Error en endpoint normal de estad√≠sticas generales:", fallbackError)
          throw fallbackError
        }
      }

      // Si no es un 404, lanzar el error original
      throw error
    }
  },

  /**
   * Obtiene estad√≠sticas generales del sistema (versi√≥n completa/actualizada)
   * @returns {Promise} Promesa con la respuesta
   */
  obtenerEstadisticasGenerales: async () => {
    try {
      console.log("Obteniendo estad√≠sticas generales completas...")
      const response = await api.get(API_ROUTES.SHARED.ESTADISTICAS_GENERALES)
      console.log("‚úÖ Estad√≠sticas generales completas obtenidas exitosamente")
      return response.data
    } catch (error) {
      console.error("‚ùå Error al obtener estad√≠sticas generales:", error)
      throw error
    }
  },

  /**
   * Obtiene estad√≠sticas de una materia espec√≠fica (versi√≥n r√°pida/cacheada con fallback)
   * @param {string} codigoMateria - C√≥digo √∫nico de la materia
   * @returns {Promise} Promesa con la respuesta
   */
  obtenerEstadisticasMateriaRapido: async (codigoMateria) => {
    try {
      console.log(`Intentando obtener estad√≠sticas r√°pidas para materia: ${codigoMateria}`)
      const response = await api.get(`${API_ROUTES.SHARED.ESTADISTICAS_MATERIA_RAPIDO}/${codigoMateria}`)
      console.log(`‚úÖ Estad√≠sticas r√°pidas de materia ${codigoMateria} obtenidas exitosamente`)
      return response.data
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error al obtener estad√≠sticas r√°pidas de materia ${codigoMateria}:`, error)

      // Si es un error 404, intentar con el endpoint normal como fallback
      if (error.response && error.response.status === 404) {
        console.log(
          `üîÑ Datos cacheados no disponibles para materia ${codigoMateria}, usando endpoint normal como fallback...`,
        )
        try {
          const fallbackResponse = await api.get(`${API_ROUTES.SHARED.ESTADISTICAS_MATERIA}/${codigoMateria}`)
          console.log(`‚úÖ Estad√≠sticas de materia ${codigoMateria} obtenidas desde endpoint normal`)
          return fallbackResponse.data
        } catch (fallbackError) {
          console.error(`‚ùå Error en endpoint normal de estad√≠sticas de materia ${codigoMateria}:`, fallbackError)
          throw fallbackError
        }
      }

      // Si no es un 404, lanzar el error original
      throw error
    }
  },

  /**
   * Obtiene estad√≠sticas de una materia espec√≠fica (versi√≥n completa/actualizada)
   * @param {string} codigoMateria - C√≥digo √∫nico de la materia
   * @returns {Promise} Promesa con la respuesta
   */
  obtenerEstadisticasMateria: async (codigoMateria) => {
    try {
      console.log(`Obteniendo estad√≠sticas completas para materia: ${codigoMateria}`)
      const response = await api.get(`${API_ROUTES.SHARED.ESTADISTICAS_MATERIA}/${codigoMateria}`)
      console.log(`‚úÖ Estad√≠sticas completas de materia ${codigoMateria} obtenidas exitosamente`)
      return response.data
    } catch (error) {
      console.error(`‚ùå Error al obtener estad√≠sticas de materia ${codigoMateria}:`, error)
      throw error
    }
  },
}

export default estadisticasService
